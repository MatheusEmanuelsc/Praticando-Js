// ========================================
// GUIA COMPLETO: "use strict" EM JAVASCRIPT
// ========================================

"use strict"; // Ativa o modo estrito

console.log("=== GUIA COMPLETO DO 'use strict' ===\n");

// ========================================
// 1. O QUE √â O "use strict"?
// ========================================

/*
üéØ DEFINI√á√ÉO:
O "use strict" √© uma diretiva que ativa o Strict Mode (Modo Estrito) do JavaScript.
Foi introduzido no ECMAScript 5 (ES5) em 2009.

üìç COMO USAR:
- Coloque "use strict"; no topo do arquivo (modo global)
- Ou no topo de uma fun√ß√£o (modo local)
- Deve ser a primeira declara√ß√£o (antes de qualquer c√≥digo)
*/

console.log("1. Strict Mode est√° ativo neste arquivo!");

// ========================================
// 2. FORMAS DE DECLARAR "use strict"
// ========================================

// FORMA 1: Modo Global (afeta todo o arquivo)
("use strict"); // ‚Üê J√° declarado no topo

// FORMA 2: Modo Local (apenas dentro da fun√ß√£o)
function exemploLocalStrict() {
  "use strict";
  console.log("2. Strict mode apenas nesta fun√ß√£o");
  return "Fun√ß√£o com strict mode local";
}

// FORMA 3: M√≥dulos ES6 (sempre em strict mode)
// export function minhaFuncao() {} // Automaticamente em strict mode

console.log(exemploLocalStrict());
console.log("");

// ========================================
// 3. PRINCIPAIS MUDAN√áAS DO STRICT MODE
// ========================================

console.log("3. === PRINCIPAIS MUDAN√áAS DO STRICT MODE ===");

// 3.1 VARI√ÅVEIS N√ÉO DECLARADAS
console.log("\n3.1 Vari√°veis n√£o declaradas:");
try {
  // Em modo normal: cria vari√°vel global automaticamente
  // Em strict mode: lan√ßa erro
  // minhaVariavel = "Isso causar√° erro!"; // ‚ùå ReferenceError
  console.log("‚úÖ Strict mode previne vari√°veis globais acidentais");
} catch (error) {
  console.log(`‚ùå Erro capturado: ${error.message}`);
}

// Forma correta:
let minhaVariavel = "Declarada corretamente";
console.log(`‚úÖ Vari√°vel declarada: ${minhaVariavel}`);

// 3.2 PAR√ÇMETROS DUPLICADOS
console.log("\n3.2 Par√¢metros duplicados:");
// function exemploRuim(a, a) { // ‚ùå Erro em strict mode
//     return a;
// }

function exemploCorreto(a, b) {
  // ‚úÖ Correto
  return a + b;
}
console.log(`‚úÖ Fun√ß√£o com par√¢metros √∫nicos: ${exemploCorreto(5, 3)}`);

// 3.3 COMPORTAMENTO DO 'this'
console.log("\n3.3 Comportamento do 'this':");

function testarThis() {
  console.log(`'this' em strict mode: ${this}`); // undefined
  return this;
}

const resultado = testarThis();
console.log(`‚úÖ Em strict mode, 'this' √© undefined em fun√ß√µes soltas`);

// 3.4 PALAVRAS RESERVADAS
console.log("\n3.4 Palavras reservadas protegidas:");
// Em strict mode, estas palavras n√£o podem ser usadas como vari√°veis:
// implements, interface, let, package, private, protected, public, static, yield

/*
try {
    let implements = "erro"; // ‚ùå Erro em strict mode
} catch (error) {
    console.log("‚ùå Palavra reservada n√£o pode ser usada");
}
*/

console.log("‚úÖ Palavras reservadas s√£o protegidas");

// ========================================
// 4. EXEMPLOS PR√ÅTICOS DE ERROS PREVENIDOS
// ========================================

console.log("\n4. === EXEMPLOS DE ERROS PREVENIDOS ===");

// 4.1 ATRIBUI√á√ÉO A PROPRIEDADES N√ÉO-GRAV√ÅVEIS
console.log("\n4.1 Propriedades n√£o-grav√°veis:");
try {
  const obj = {};
  Object.defineProperty(obj, "prop", {
    value: 42,
    writable: false,
  });

  // obj.prop = 100; // ‚ùå Erro em strict mode (silencioso em modo normal)
  console.log(
    "‚úÖ Tentativa de modificar propriedade n√£o-grav√°vel foi bloqueada"
  );
} catch (error) {
  console.log(`‚ùå Erro: ${error.message}`);
}

// 4.2 DELETE EM VARI√ÅVEIS
console.log("\n4.2 Delete em vari√°veis:");
try {
  let minhaVar = "teste";
  // delete minhaVar; // ‚ùå Erro em strict mode
  console.log("‚úÖ Delete em vari√°veis n√£o √© permitido");
} catch (error) {
  console.log(`‚ùå Erro: ${error.message}`);
}

// 4.3 N√öMEROS OCTAIS
console.log("\n4.3 N√∫meros octais:");
try {
  // const octal = 010; // ‚ùå Erro em strict mode (antigo formato octal)
  const octal = 0o10; // ‚úÖ Formato correto ES6
  console.log(`‚úÖ N√∫mero octal correto: ${octal}`);
} catch (error) {
  console.log(`‚ùå Erro: ${error.message}`);
}

// ========================================
// 5. COMPARA√á√ÉO: COM E SEM STRICT MODE
// ========================================

console.log("\n5. === COMPARA√á√ÉO: COM E SEM STRICT MODE ===");

// Simulando comportamento sem strict mode (em coment√°rios)
console.log(`
üìä TABELA COMPARATIVA:

Situa√ß√£o                    | Modo Normal      | Strict Mode
----------------------------|------------------|------------------
Vari√°vel n√£o declarada      | Cria global      | ‚ùå ReferenceError  
Par√¢metros duplicados       | Usa o √∫ltimo     | ‚ùå SyntaxError
'this' em fun√ß√£o solta      | window/global    | undefined
Delete vari√°vel             | Ignora (false)   | ‚ùå SyntaxError
Propriedade n√£o-grav√°vel    | Ignora silencio  | ‚ùå TypeError
N√∫meros octais (010)        | Funciona         | ‚ùå SyntaxError
Palavras reservadas         | Funciona         | ‚ùå SyntaxError
`);

// ========================================
// 6. VANTAGENS DO STRICT MODE
// ========================================

console.log("6. === VANTAGENS DO STRICT MODE ===");
console.log(`
üéØ BENEF√çCIOS:

‚úÖ SEGURAN√áA:
   ‚Ä¢ Previne cria√ß√£o acidental de vari√°veis globais
   ‚Ä¢ Detecta erros que seriam silenciosos
   ‚Ä¢ Protege contra modifica√ß√µes perigosas

‚úÖ DEPURA√á√ÉO:
   ‚Ä¢ Erros s√£o lan√ßados imediatamente
   ‚Ä¢ Mais f√°cil encontrar problemas no c√≥digo
   ‚Ä¢ Comportamento mais previs√≠vel

‚úÖ PERFORMANCE:
   ‚Ä¢ Alguns engines otimizam melhor c√≥digo strict
   ‚Ä¢ Elimina comportamentos lentos do JavaScript

‚úÖ FUTURO:
   ‚Ä¢ Prepara c√≥digo para vers√µes futuras
   ‚Ä¢ Muitas funcionalidades ES6+ assumem strict mode
   ‚Ä¢ Padr√£o em m√≥dulos ES6
`);

// ========================================
// 7. QUANDO USAR STRICT MODE
// ========================================

console.log("7. === QUANDO USAR STRICT MODE ===");
console.log(`
üéØ RECOMENDA√á√ïES:

‚úÖ SEMPRE USE EM:
   ‚Ä¢ Projetos novos
   ‚Ä¢ C√≥digo moderno (ES6+)
   ‚Ä¢ Aplica√ß√µes grandes
   ‚Ä¢ C√≥digo em produ√ß√£o

‚ö†Ô∏è  CUIDADO EM:
   ‚Ä¢ C√≥digo legado existente
   ‚Ä¢ Bibliotecas de terceiros antigas
   ‚Ä¢ C√≥digo que mistura strict e n√£o-strict

üöÄ DICA:
   ‚Ä¢ M√≥dulos ES6 s√£o automaticamente strict
   ‚Ä¢ Ferramentas como Babel/TypeScript aplicam automaticamente
   ‚Ä¢ Considere usar linters (ESLint) com regras strict
`);

// ========================================
// 8. EXEMPLOS PR√ÅTICOS DE USO
// ========================================

console.log("\n8. === EXEMPLOS PR√ÅTICOS ===");

// 8.1 FUN√á√ÉO COM VALIDA√á√ÉO STRICT
function calcularIdade(anoNascimento) {
  "use strict";

  // Valida√ß√£o rigorosa
  if (typeof anoNascimento !== "number") {
    throw new TypeError("Ano deve ser um n√∫mero");
  }

  if (anoNascimento < 1900 || anoNascimento > new Date().getFullYear()) {
    throw new RangeError("Ano inv√°lido");
  }

  const anoAtual = new Date().getFullYear();
  return anoAtual - anoNascimento;
}

try {
  console.log(`Idade calculada: ${calcularIdade(1990)} anos`);
} catch (error) {
  console.log(`Erro na valida√ß√£o: ${error.message}`);
}

// 8.2 CLASSE COM STRICT MODE (ES6)
class PessoaStrictMode {
  constructor(nome, idade) {
    // Classes s√£o automaticamente em strict mode
    this.nome = nome;
    this.idade = idade;
  }

  apresentar() {
    return `Ol√°, eu sou ${this.nome} e tenho ${this.idade} anos`;
  }
}

const pessoa = new PessoaStrictMode("Jo√£o", 30);
console.log(pessoa.apresentar());

// ========================================
// 9. RESUMO E BOAS PR√ÅTICAS
// ========================================

console.log("\n9. === RESUMO E BOAS PR√ÅTICAS ===");
console.log(`
üéØ RESUMO FINAL:

‚úÖ O QUE FAZER:
   1. Use "use strict"; em todo c√≥digo novo
   2. Coloque no topo do arquivo ou fun√ß√£o
   3. Declare todas as vari√°veis com let/const
   4. Use ferramentas como ESLint
   5. Teste seu c√≥digo rigorosamente

‚ùå O QUE EVITAR:
   1. Misturar c√≥digo strict e n√£o-strict
   2. Aplicar strict mode em c√≥digo legado sem testes
   3. Ignorar erros lan√ßados pelo strict mode
   4. Usar var (prefira let/const)
   5. Par√¢metros duplicados ou palavras reservadas

üöÄ CONCLUS√ÉO:
O strict mode torna JavaScript mais seguro, mais r√°pido e mais previs√≠vel.
√â uma ferramenta essencial para desenvolvimento moderno!
`);

console.log("üéâ Guia completo do 'use strict' finalizado!");

// ========================================
// 10. C√ìDIGO DE TESTE FINAL
// ========================================

// Fun√ß√£o para testar se strict mode est√° ativo
function verificarStrictMode() {
  return (function () {
    return !this;
  })();
}

console.log(
  `\nüîç Verifica√ß√£o final: Strict mode est√° ${
    verificarStrictMode() ? "ATIVO" : "INATIVO"
  }`
);
