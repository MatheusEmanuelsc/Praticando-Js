// Suponha que temos duas vari√°veis com valores de texto
let nome = "Maria";
let idade = 25;

// üìå 1. CONCATENA√á√ÉO CL√ÅSSICA (antiga) com operador `+`
let frase1 = "Ol√°, meu nome √© " + nome + " e eu tenho " + idade + " anos.";
console.log(frase1);

// Explica√ß√£o:
// - Cada parte da string √© "colada" com o operador +.
// - Funciona com strings e vari√°veis, mas fica confuso quando h√° muitas partes.

// üìå 2. CONCATENA√á√ÉO COM v√≠rgula no console.log
console.log("Ol√°, meu nome √©", nome, "e eu tenho", idade, "anos.");

// Explica√ß√£o:
// - A v√≠rgula separa os argumentos e o console exibe todos juntos com espa√ßo.
// - √ötil apenas para debug, n√£o funciona para criar uma string √∫nica.

// üìå 3. TEMPLATE STRING (forma moderna e recomendada) usando crase ``
let frase2 = `Ol√°, meu nome √© ${nome} e eu tenho ${idade} anos.`;
console.log(frase2);

// Explica√ß√£o:
// - Usa crases (`) em vez de aspas.
// - Permite inserir vari√°veis diretamente com ${...}, facilitando a leitura.
// - Tamb√©m suporta express√µes, n√£o s√≥ vari√°veis:

let anoAtual = 2025;
let anoNascimento = anoAtual - idade;
console.log(`Eu nasci em ${anoNascimento}.`); // Faz o c√°lculo dentro da string

// üìå 4. USANDO String.concat() (quase nunca usado hoje em dia)
let frase3 = "Ol√°, meu nome √© ".concat(nome, " e eu tenho ", idade, " anos.");
console.log(frase3);

// Explica√ß√£o:
// - `.concat()` √© um m√©todo da string, mas pouco usado porque o `+` e o template string s√£o mais pr√°ticos.
// - √â mais comum em linguagens antigas ou em c√≥digo muito legado.
