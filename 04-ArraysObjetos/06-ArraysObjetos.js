// ==============================
// üìö RESUMO DE M√âTODOS PARA ARRAYS DE OBJETOS
// ==============================

/*
| M√©todo        | Descri√ß√£o resumida                                                        |
|---------------|----------------------------------------------------------------------------|
| forEach()     | Itera sobre cada item (sem retornar novo array)                           |
| map()         | Cria novo array com os itens modificados                                  |
| filter()      | Retorna um novo array com itens que passam na condi√ß√£o                    |
| find()        | Retorna o primeiro item que satisfaz a condi√ß√£o                           |
| push()        | Adiciona novo item ao final do array                                      |
| splice()      | Insere, remove ou substitui itens em uma posi√ß√£o espec√≠fica               |
| some()        | Retorna true se ao menos um item passar na condi√ß√£o                       |
| every()       | Retorna true se todos os itens passarem na condi√ß√£o                       |
| includes()    | Verifica se array cont√©m um valor (n√£o funciona direto com objetos)       |
| sort()        | Ordena os itens (passar fun√ß√£o comparadora para objetos)                  |
| reduce()      | Reduz o array a um √∫nico valor (usado para somat√≥rios, agrupamentos, etc) |
| concat()      | Junta dois arrays (sem alterar os originais)                              |
| Array.isArray()| Verifica se √© um array                                                    |
| Array.from()  | Cria um array a partir de algo iter√°vel (ex: NodeList, Set, etc.)         |
*/

// ==============================
// üìå ARRAYS DE OBJETOS ‚Äî CONCEITO
// ==============================

/*
Arrays podem conter objetos como elementos, sendo √∫teis para representar listas estruturadas,
como usu√°rios, produtos, tarefas etc.
*/

const usuarios = [
  { id: 1, nome: "Ana", idade: 25 },
  { id: 2, nome: "Bruno", idade: 30 },
  { id: 3, nome: "Carlos", idade: 22 },
];

// ==============================
// üîç ACESSO A DADOS
// ==============================

console.log(usuarios[0]); // Acessa o primeiro objeto
console.log(usuarios[1].nome); // Acessa a propriedade "nome" do segundo objeto

// ==============================
// üîÅ PERCORRER O ARRAY
// ==============================

usuarios.forEach((usuario) => {
  console.log(`Nome: ${usuario.nome} | Idade: ${usuario.idade}`);
});

// ==============================
// üîç BUSCAR E FILTRAR
// ==============================

const usuarioCarlos = usuarios.find((u) => u.nome === "Carlos"); // Primeiro que satisfaz
const maioresDe25 = usuarios.filter((u) => u.idade > 25); // Todos que satisfazem

// ==============================
// üõ†Ô∏è TRANSFORMAR COM MAP
// ==============================

const nomesMaiusculos = usuarios.map((u) => ({
  ...u,
  nome: u.nome.toUpperCase(),
}));

// ==============================
// ‚ûï ADICIONAR NOVO ITEM
// ==============================

usuarios.push({ id: 4, nome: "Diana", idade: 28 });

// ==============================
// ‚ûñ REMOVER ITEM (sem alterar original)
const semCarlos = usuarios.filter((u) => u.nome !== "Carlos");

// ==============================
// üìù ATUALIZAR ITEM
const atualizarBruno = usuarios.map((u) =>
  u.nome === "Bruno" ? { ...u, idade: 35 } : u
);

// ==============================
// üìä REDUZIR ARRAY (ex: somar idades)
const somaIdades = usuarios.reduce((total, u) => total + u.idade, 0);

// ==============================
// üß† VERIFICAR ALGUMA CONDI√á√ÉO
const alguemMenorQue20 = usuarios.some((u) => u.idade < 20);
const todosMaioresDe18 = usuarios.every((u) => u.idade >= 18);

// ==============================
// üî¢ ORDENAR OBJETOS POR IDADE
const ordenadoPorIdade = [...usuarios].sort((a, b) => a.idade - b.idade);

// ==============================
// üß™ VERIFICAR SE √â UM ARRAY
console.log(Array.isArray(usuarios)); // true

// ==============================
// üß± COPIAR OU CONCATENAR
const copiaUsuarios = [...usuarios]; // Spread para copiar
const concatenado = usuarios.concat([{ nome: "Elias" }]); // concat

// ==============================
// üß© Array.from (√∫til com NodeList, Sets, argumentos, etc)
const arrayDeNumeros = Array.from([1, 2, 3, 4]);

// ==============================
// ‚ö†Ô∏è includes() N√ÉO FUNCIONA DIRETO COM OBJETOS
// Este m√©todo compara por refer√™ncia, n√£o por conte√∫do
const objetoTeste = { id: 1, nome: "Ana", idade: 25 };
console.log(usuarios.includes(objetoTeste)); // false (mesmo que o conte√∫do seja igual)
