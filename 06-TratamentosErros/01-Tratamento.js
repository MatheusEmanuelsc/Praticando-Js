// ==============================
// üéØ TRATAMENTO DE EXCE√á√ïES
// ==============================

/*
 try:     bloco onde voc√™ coloca o c√≥digo que pode gerar erro
 catch:   executado se um erro acontecer no try
 finally: (opcional) sempre executa, com ou sem erro
 throw:   serve para lan√ßar manualmente um erro
*/

function dividir(a, b) {
  try {
    // Verifica se os argumentos s√£o n√∫meros
    if (typeof a !== "number" || typeof b !== "number") {
      // Lan√ßa um erro manualmente
      throw new Error("Os par√¢metros devem ser n√∫meros.");
    }

    // Verifica se o divisor √© zero
    if (b === 0) {
      throw new Error("Divis√£o por zero n√£o √© permitida.");
    }

    // Se tudo estiver certo, realiza a divis√£o
    const resultado = a / b;
    console.log("Resultado:", resultado);
    return resultado;
  } catch (erro) {
    // Captura e exibe o erro
    console.error("Erro capturado:", erro.message);
  } finally {
    // Sempre executa, com ou sem erro
    console.log("Opera√ß√£o finalizada (try/catch/finally).");
  }
}

// ‚úÖ Exemplo de uso:
dividir(10, 2); // Resultado: 5
dividir(10, 0); // Erro: divis√£o por zero
dividir(10, "a"); // Erro: par√¢metros inv√°lidos
